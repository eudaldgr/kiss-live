#!/bin/sh
#
# script to build livecd iso for kisslinux
#
# false positive
# shellcheck disable=2154

print()
{
    printf "%b \033[1;34m%s\033[m\n" "${2:-"\033[1;33m->\033[m"}" "$1"
}

panic()
{
    print "${1:-unexpected error occurred}" \
        "\033[1;31m!!\033[m" >&2; exit 1
}

chroot_exec()
{
    echo "$1 3>&-" | "$rootfsdir/usr/bin/kiss-chroot" "${2:-$rootfsdir}" >/dev/null
}

check_depends()
{
    # shellcheck disable=1091
    . /etc/os-release

    # shellcheck disable=2015
    if [ "$PRETTY_NAME" = "KISS Linux" ]; then
        for _pkg in grub libisoburn squashfs-tools syslinux; do
            [ -d "/var/db/kiss/installed/$_pkg" ] || panic "$_pkg not installed"
        done
    else
        print "Distro not supported, errors may be expected."
        sleep 5;
    fi
}

usage()
{
    cat << EOF
usage: ${0##*/} [options ...]
       -b, --build   <file>           set config file path
                                      default is ./build.cfg

       -c, --cache   <dir>            set cache directory
                                      default is inside chroot
                                    
       -o, --output  <name>           set livecd output path
                                      default is kiss-live-\$ver
                                    
       -p, --package <pkg1,pkg2,...>  set packages to install
                                      default are <none>

       -d, --debug                    enable debug mode
       -h, --help                     show this help

EOF
}

prepare_environment()
{
    while [ "$1" ]; do case "$1" in
        -b | --build)
            buildcfg="${2:?}"; shift 2
        ;;
        -c | --cache)
            cachedir="${2:?}"; shift 2
        ;;
        -o | --output)
            isolabel="${2:?}"; shift 2
        ;;
        -p | --package)
            packages="${2:?}"; shift 2
        ;;
        -d | --debug)
            debug=1; shift 1
        ;;
        -h | --help)
            usage; exit 0
        ;;
        *)
            printf "invalid option: %s\n\n" "$1"
            usage; exit 1
        ;;
    esac; done

    print "Preparing enviroment"

    # false positive
    # shellcheck disable=1090
    . "${buildcfg:=./build.cfg}"

    rm    -rf "$rootfsdir" "$isodir" #"$tmpdir"
    mkdir -p  "$rootfsdir" "$isodir" "$tmpdir"

    [ ! -z "$cachedir" ] && {
        trap 'umount $rootfsdir/root/.cache/kiss/sources' EXIT INT

        print "Mounting cache dir"
            mkdir -p "$rootfsdir/root/.cache/kiss/sources"
            mount --bind "$cachedir" "$rootfsdir/root/.cache/kiss/sources"
    }

    # false positive
    # shellcheck disable=2015
    [ "$debug" = 1 ] && set -x || trap 'rm -rf $rootfsdir $isodir $tmpdir' EXIT INT
}

prepare_rootfs()
{
    [ ! -f "$tmpdir/$tar" ] && {
        print "Downloading source"
            curl -L "$dl" -o "$tmpdir/$tar" || panic "Failed downloading source"
    }

    print "Extracting source"
        tar xf "$tmpdir/$tar" -C "$rootfsdir" || panic "Failed extracting source"

    print "Preparing rootfs enviroment"
        cp -r "$repodir"        "$rootfsdir/var/db/kiss/live"
        install -D "$filesdir/issue"        -t "$rootfsdir/etc"
        install -D "$hooksdir/kiss/hooks"   -t "$rootfsdir/root/.cache"
        install -D "$filesdir/kiss-live.sh" -t "$rootfsdir/etc/profile.d"

        git clone "$url/repo"      "$rootfsdir/var/db/kiss/repo"
        git clone "$url/community" "$rootfsdir/var/db/kiss/community"

    print "Enable login"
        chroot_exec "
            adduser -D kiss
            echo kiss:kiss | chpasswd kiss"

    print "Updating system"
        chroot_exec "kiss u && kiss u" || panic "Failed updating system"

    print "Rebuild all"
        chroot_exec "cd /var/db/kiss/installed && kiss b *" \
            || panic "Failed to rebuild system"

        # false positive
        # shellcheck disable=2015
        [ "$packages" ] && {
            echo "$packages" | sed 's/,/\\n/g' | tee -a "$rootfsdir/var/db/kiss/live/metapkg/depends"
        } || panic "Failed adding additional packages"

    print "Installing packages"
        chroot_exec "kiss b metapkg && kiss i metapkg" \
            || panic "Failed installing iso packages"

    print "Enabling services"
        chroot_exec "
            ln -sf /usr/share/dhcpcd/hooks/10-wpa_supplicant /usr/lib/dhcpcd/dhcpcd-hooks
            ln -sf /etc/sv/dhcpcd                            /var/service
            ln -sf /etc/sv/mdev                              /var/service
            {
                echo 'SUBSYSTEM=drm;.*   root:video 660 *env > /tmp/.libudev-zero/uevent.\$\$'
                echo 'SUBSYSTEM=input;.* root:input 660 *env > /tmp/.libudev-zero/uevent.\$\$'
            } >> /etc/mdev.conf" \
            || panic "Failed enabling services"

    print "Remove orphans"
        chroot_exec "
            while kiss o | grep -qv metapkg; do \
                kiss r \`kiss o | grep -v metapkg | tr '\\n' ' '\`; \
            done
            kiss r metapkg" \
            || panic "Failed to remove orphans"
}

make_iso()
{
    print "Preparing isolinux files"
        install -D "$filesdir/isolinux.cfg" -t "$isodir/isolinux"
        for file in $isolinux_files; do
            install -D "/usr/lib/syslinux/$file" -t "$isodir/isolinux"
        done
    
    print "Squashing root filesystem"
        mksquashfs \
            "$rootfsdir" \
            "$isodir/kiss-rootfs.sfs" \
            -comp xz \
            -b 1024K \
            -Xbcj x86 \
            -e "$rootfsdir/etc/profile.d/kiss-live.sh" \
            -e "$rootfsdir/var/db/kiss/community" \
            -e "$rootfsdir/usr/share/licenses" \
            -e "$rootfsdir/var/db/kiss/repo" \
            -e "$rootfsdir/var/db/kiss/live" \
            -e "$rootfsdir/boot/vmlinuz" \
            -e "$rootfsdir/root/.cache" \
            2>/dev/null \
            || panic "Failed create sfs root filesystem"
                
        install -D "$rootfsdir/boot/vmlinuz" -t "$isodir/boot/vmlinuz" \
            || panic "Failed copying kernel"

    print "Creating initrd"
        mkdir -p "$rootfsdir/usr/share/tinyramfs/hooks"
        cp -r "$hooksdir/tinyramfs" "$rootfsdir/usr/share/tinyramfs/hooks/live"
        install -D "$filesdir/config" -t "$rootfsdir/etc/tinyramfs"

        sed -i "s/@ISOLABEL@/$isolabel/g" "$rootfsdir/etc/tinyramfs/config" \
            || panic "Failed preparing tinyramfs"

        chroot_exec "
            kiss b tinyramfs && kiss i tinyramfs
            debug=$debug tinyramfs -o /boot/initrd" \
            || panic "Failed create initramfs"
        
        install -D "$rootfsdir/boot/initrd" -t "$isodir/boot" \
            || panic "Failed copying initrd"
    
    print "Setup UEFI mode"
        {
            echo "set prefix=/boot/grub" >        "$isodir/boot/grub-early.cfg"
            cp -a /usr/lib/grub/x86_64-efi        "$isodir/boot/grub"
            install -D "$filesdir/unicode.pf2" -t "$isodir/boot/grub/fonts"
            install -D "$filesdir/grub.cfg"    -t "$isodir/boot/grub"
        } || panic "Failed copying efi files"

        mkdir -p "$isodir/boot/EFI"

        grub-mkimage \
            -c "$isodir/boot/grub-early.cfg" \
            -o "$isodir/boot/EFI/bootx64.efi" \
            -O x86_64-efi \
            -p "" iso9660 normal search search_fs_file

        dd if=/dev/zero of="$isodir/boot/efiboot.img" count=4096
        mkdosfs -n KISS-UEFI "$isodir/boot/efiboot.img" \
            || panic "Failed create mkdosfs image"

        mkdir -p "$isodir/boot/efiboot"
        mount -o loop "$isodir/boot/efiboot.img" "$isodir/boot/efiboot" \
            || panic "Failed mount efiboot.img"

        mkdir -p "$isodir/boot/efiboot/EFI/boot"
        cp "$isodir/boot/EFI/bootx64.efi" "$isodir/boot/efiboot/EFI/boot"
        umount "$isodir/boot/efiboot"
        rm -rf "$isodir/boot/efiboot"

    print "Creating iso"
        rm -f "$isolabel.iso" "$isolabel.iso.md5" "$isolabel.iso.sha1"
        xorriso \
            -as mkisofs \
            -isohybrid-mbr /usr/lib/syslinux/isohdpfx.bin \
            -c isolinux/boot.cat \
            -b isolinux/isolinux.bin \
            -no-emul-boot \
            -boot-load-size 4 \
            -boot-info-table \
            -eltorito-alt-boot \
            -e boot/efiboot.img \
            -no-emul-boot \
            -isohybrid-gpt-basdat \
            -volid "$isolabel" \
            -o "$here/$isolabel.iso" "$isodir" \
            || panic "Failed creating iso"

    print "Generate checksums"
        md5sum  "$isolabel.iso" > "$here/$isolabel.iso.md5"
        sha1sum "$isolabel.iso" > "$here/$isolabel.iso.sha1"
}

# int main()
{
    [ "$(id -u)" = 0 ] || panic "must be run as root"

    # enable exit on error and disable globbing
    set -ef

    check_depends
    prepare_environment "$@"
    prepare_rootfs
    make_iso
}
