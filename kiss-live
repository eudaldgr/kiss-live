#!/bin/sh
#
# script to build livecd iso for kisslinux
#
# false positive
# shellcheck disable=2154

print()
{
    printf "%b \033[1;34m%s\033[m\n" "${2:-"\033[1;33m->\033[m"}" "$1"
}

panic()
{
    print "${1:-unexpected error occurred}" \
        "\033[1;31m!!\033[m" >&2; exit 1
}

chroot_exec()
{
    echo "$1 3>&-" | "$rootfsdir/bin/kiss-chroot" "${2:-$rootfsdir}" >/dev/null
}

check_depends()
{
    . /etc/os-release

    [ "$PRETTY_NAME" = "KISS Linux" ] && {
        for _pkg in grub libisoburn squashfs-tools syslinux; do
            [ -d "/var/db/kiss/installed/$_pkg" ] || panic "$_pkg not installed"
        done
    }
}

usage()
{
    cat << EOF
usage: ${0##*/} [options ...]
       -b, --build   <file>           set config file path
                                      default is ./build.cfg

       -c, --cache   <dir>            set cache directory
                                      default is inside chroot
                                    
       -o, --output  <name>           set livecd output path
                                      default is kiss-live-\$ver
                                    
       -p, --package <pkg1,pkg2,...>  set packages to install
                                      default are <none>

       -d, --debug                    enable debug mode
       -h, --help                     show this help

EOF
}

prepare_environment()
{
    while [ "$1" ]; do case "$1" in
        -b | --build)
            buildcfg="${2:?}"; shift 2
        ;;
        -c | --cache)
            cachedir="${2:?}"; shift 2
        ;;
        -o | --output)
            isolabel="${2:?}"; shift 2
        ;;
        -p | --package)
            packages="${2:?}"; shift 2
        ;;
        -d | --debug)
            debug=1; shift 1
        ;;
        -h | --help)
            usage; exit 0
        ;;
        *)
            printf "invalid option: %s\n\n" "$1"
            usage; exit 1
        ;;
    esac; done

    print "Preparing enviroment"

    # false positive
    # shellcheck disable=1090
    . "${buildcfg:=./build.cfg}"

    rm -rf "$rootfsdir" "$isodir"
    mkdir -p "$rootfsdir" "$isodir" "$tmpdir"

    if [ ! -z "$cachedir" ]; then
        trap 'umount $rootfsdir/root/.cache/kiss/sources' EXIT INT

        print "Mounting cache dir"
        mkdir -p "$rootfsdir/root/.cache/kiss/sources"
        mount --bind "$cachedir" "$rootfsdir/root/.cache/kiss/sources"
    fi

    # false positive
    # shellcheck disable=2015
    [ "$debug" = 1 ] && set -x || trap 'rm -rf $rootfsdir $isodir $tmpdir' EXIT INT
}

prepare_rootfs()
{
    if [ ! -f "$tmpdir/$tar" ]; then
        print "Downloading source"
        wget "$down" -O "$tmpdir/$tar" || panic "Failed downloading source"
    fi

    print "Extracting source"
    tar xf "$tmpdir/$tar" -C "$rootfsdir" || panic "Failed extracting source"

    print "Preparing rootfs enviroment"
    cp -r "$repodir"             "$rootfsdir/var/db/kiss/live"
    cp -r "$filesdir/issue"      "$rootfsdir/etc/issue"
    install -D "$hooksdir/kiss/hooks" -t "$rootfsdir/root/.cache"

    chroot_exec "
        git clone $url/repo      /var/db/kiss/repo/
        git clone $url/community /var/db/kiss/community/
        {
            echo 'export KISS_SU=su'
            echo 'export KISS_PROMPT=0'
            echo 'export KISS_HOOK=/root/.cache/hooks'
            echo 'export KISS_PATH=/var/db/kiss/repo/core'
            echo 'KISS_PATH=\$KISS_PATH:/var/db/kiss/repo/extra'
            echo 'KISS_PATH=\$KISS_PATH:/var/db/kiss/repo/xorg'
            echo 'KISS_PATH=\$KISS_PATH:/var/db/kiss/community/community'
            echo 'KISS_PATH=\$KISS_PATH:/var/db/kiss/live'
            echo 'export CFLAGS=\"-march=x86-64 -mtune=generic -pipe -Os\"'
            echo 'export CXXFLAGS=\"\$CFLAGS\"'
            echo 'export MAKEFLAGS=\"-j4\"'
        } >> /etc/profile.d/kiss-live.sh" \
    || panic "Failed preparing rootfs enviroment"

    print "Enable login's"
    chroot_exec "
        adduser -D kiss
        echo kiss:kiss | chpasswd kiss
        echo root:root | chpasswd root"

    print "Updating system"
    chroot_exec "kiss u && kiss u" || panic "Failed updating system"

    print "Rebuild all"
    chroot_exec "
        cd /var/db/kiss/installed
        kiss b *" || panic "Failed to rebuild system"

    [ "$packages" ] && {
        chroot_exec "echo $packages | sed 's/,/\\n/g' | tee -a /var/db/kiss/live/metapkg/depends" \
            || panic "Failed installing additional packages"
    }

    print "Installing packages"
    chroot_exec "kiss b metapkg && kiss i metapkg" \
        || panic "Failed installing iso packages"

    print "Enabling services"
    chroot_exec "
        ln -sf /usr/share/dhcpcd/hooks/10-wpa_supplicant /usr/lib/dhcpcd/dhcpcd-hooks/
        ln -sf /etc/sv/dhcpcd                            /var/service
        ln -sf /etc/sv/mdev                              /var/service" \
    || panic "Failed enabling services"

    print "Remove orphans"
    chroot_exec "
        while kiss o | grep -qv metapkg; do \
            kiss r \`kiss o | grep -v metapkg | tr '\\n' ' '\`; \
        done
        kiss r metapkg" \
        || panic "Failed to remove orphans"
}

make_iso()
{
    print "Preparing isolinux files"
    for dir in isolinux boot; do
        mkdir -p "$isodir/$dir"
    done

    cp "$filesdir/isolinux.cfg" "$isodir/isolinux"
    for file in $isolinux_files; do
        cp "/usr/lib/syslinux/$file" "$isodir/isolinux"
    done
    
    print "Squashing root filesystem"
    mksquashfs \
        "$rootfsdir" \
        "$isodir/kiss-rootfs.sfs" \
        -comp xz \
        -b 1024K \
        -Xbcj x86 \
        -e "$rootfsdir/boot/vmlinuz" \
        -e "$rootfsdir/etc/profile.d/kiss-live.sh" \
        -e "$rootfsdir/root/.cache" \
        -e "$rootfsdir/usr/share/licenses" \
        -e "$rootfsdir/var/db/kiss/repo" \
        -e "$rootfsdir/var/db/kiss/community" \
        -e "$rootfsdir/var/db/kiss/live" \
        2>/dev/null \
        || panic "Failed create sfs root filesystem"
            
    cp "$rootfsdir/boot/vmlinuz" "$isodir/boot/vmlinuz" \
        || panic "Failed copying kernel"

    print "Creating initrd"
    kernver=$(file "$rootfsdir/boot/vmlinuz" | cut -d ' ' -f9)
    mkdir -p "$rootfsdir/etc/tinyramfs"
    mkdir -p "$rootfsdir/usr/share/tinyramfs/hooks"
    cp -r "$hooksdir/tinyramfs" "$rootfsdir/usr/share/tinyramfs/hooks/live"
    cp -r "$filesdir/config"    "$rootfsdir/etc/tinyramfs/config"

    sed -i "s/@ISOLABEL@/$isolabel/g" \
        "$rootfsdir/etc/tinyramfs/config" \
        || panic "Failed preparing tinyramfs"

    chroot_exec "
        kiss b tinyramfs && kiss i tinyramfs
        kiss a util-linux /usr/bin/mount
        debug=$debug tinyramfs -k $kernver -o /boot/initrd" \
    || panic "Failed create initramfs"
    
    cp "$rootfsdir/boot/initrd" "$isodir/boot/initrd" \
        || panic "Failed copying initrd"
    
    print "Setup UEFI mode"
    for dir in grub/fonts grub/x86_64-efi EFI; do
        mkdir -p "$isodir/boot/$dir"
    done

    cp "$filesdir/unicode.pf2" "$isodir/boot/grub/fonts"
    echo "set prefix=/boot/grub" > "$isodir/boot/grub-early.cfg"
    cp -a /usr/lib/grub/x86_64-efi "$isodir/boot/grub" \
        || panic "Failed copying efi files"

    cp "$filesdir/grub.cfg" "$isodir/boot/grub/"

    grub-mkimage \
        -c "$isodir/boot/grub-early.cfg" \
        -o "$isodir/boot/EFI/bootx64.efi" \
        -O x86_64-efi \
        -p "" iso9660 normal search search_fs_file

    dd if=/dev/zero of="$isodir/boot/efiboot.img" count=4096
    mkdosfs -n KISS-UEFI "$isodir/boot/efiboot.img" \
        || panic "Failed create mkdosfs image"

    mkdir -p "$isodir/boot/efiboot"
    mount -o loop "$isodir/boot/efiboot.img" "$isodir/boot/efiboot" \
        || panic "Failed mount efiboot.img"

    mkdir -p "$isodir/boot/efiboot/EFI/boot"
    cp "$isodir/boot/EFI/bootx64.efi" "$isodir/boot/efiboot/EFI/boot"
    umount "$isodir/boot/efiboot"
    rm -rf "$isodir/boot/efiboot"

    print "Creating iso"
    rm -f "$isolabel.iso" "$isolabel.iso.md5" "$isolabel.iso.sha1"
    xorriso \
        -as mkisofs \
        -isohybrid-mbr /usr/lib/syslinux/isohdpfx.bin \
        -c isolinux/boot.cat \
        -b isolinux/isolinux.bin \
        -no-emul-boot \
        -boot-load-size 4 \
        -boot-info-table \
        -eltorito-alt-boot \
        -e boot/efiboot.img \
        -no-emul-boot \
        -isohybrid-gpt-basdat \
        -volid "$isolabel" \
        -o "$here/$isolabel.iso" "$isodir" \
        || panic "Failed creating iso"

    print "Generate md5sum"
    md5sum "$isolabel.iso" > "$here/$isolabel.iso.md5"

    print "Generate sha1sum"
    sha1sum "$isolabel.iso" > "$here/$isolabel.iso.sha1"
}

# int main()
{
    [ "$(id -u)" = 0 ] || panic "must be run as root"

    # enable exit on error and disable globbing
    set -ef

    check_depends
    prepare_environment "$@"
    prepare_rootfs
    make_iso
}
