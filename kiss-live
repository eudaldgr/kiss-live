#!/bin/sh
#
# script to build livecd iso for kisslinux
#
# false positive
# shellcheck disable=2154

print()
{
    printf "%b \033[1;34m%s\033[m\n" "${2:-"\033[1;33m->\033[m"}" "$1"
}

panic()
{
    print "${1:-unexpected error occurred}" \
        "\033[1;31m!!\033[m" >&2; exit 1
}

chroot_exec()
{
    echo "$1 3>&-" | "$rootfsdir/usr/bin/kiss-chroot" "${2:-$rootfsdir}" >/dev/null
}

check_depends()
{
    # shellcheck disable=1091
    . /etc/os-release

    # shellcheck disable=2015
    if [ "$PRETTY_NAME" = "KISS Linux" ]; then
        for _pkg in grub libisoburn syslinux; do
            [ -d "/var/db/kiss/installed/$_pkg" ] || panic "$_pkg not installed"
        done
    else
        print "Distro not supported, errors may be expected."; sleep 5;
    fi
}

cleanup()
{
    [ -n "$pkgdir" ] && umount "$rootfsdir/root/.cache/kiss/sources"
    [ "$debug" = 1 ] || rm -rf "$rootfsdir" "$isodir" "$tmpdir"
}

usage()
{
    cat << EOF
usage: ${0##*/} [options ...]
       -c, --config   <file>           set config file path
                                       default is ./build.cfg

       -s, --sources  <dir>            set sources directory
                                       default is inside chroot
                                    
       -o, --output   <name>           set livecd output path
                                       default is kiss-live-\$ver
                                    
       -p, --package  <pkg1,pkg2,...>  set packages to install
                                       default are <none>

       -k, --kde                       enable K Desktop Enviroment

       -d, --debug                     enable debug mode
       -h, --help                      show this help

EOF
}

prepare_environment()
{
    while [ "$1" ]; do case "$1" in
        -c | --config)
            buildcfg="${2:?}"; shift 2
        ;;
        -s | --sources)
            pkgdir="${2:?}";   shift 2
        ;;
        -o | --output)
            isolabel="${2:?}"; shift 2
        ;;
        -p | --package)
            packages="${2:?}"; shift 2
        ;;
        -k | --kde)
            kde=1;   shift 1
        ;;
        -d | --debug)
            debug=1; shift 1
        ;;
        -h | --help)
            usage; exit 0
        ;;
        *)
            printf "invalid option: %s\n\n" "$1"
            usage; exit 1
        ;;
    esac; done

    print "Preparing enviroment"

    # false positive
    # shellcheck disable=1090
    . "${buildcfg:=./build.cfg}"

    rm    -rf "$rootfsdir" "$isodir" #"$tmpdir"
    mkdir -p  "$rootfsdir" "$isodir" "$tmpdir"

    [ -n "$pkgdir" ] && {
        mkdir -p "$rootfsdir/root/.cache/kiss/sources"
        mount --bind "$pkgdir" "$rootfsdir/root/.cache/kiss/sources"
    }

    trap 'cleanup' EXIT INT

    # false positive
    # shellcheck disable=2015
    [ "$debug" = 1 ] && set -x || :
}

prepare_rootfs()
{
    [ ! -f "$tmpdir/$tar" ] && {
        print "Downloading source"
            curl -L "$dl" -o "$tmpdir/$tar" || panic "Failed downloading source"
    }

    print "Extracting source"
        (
            cd "$rootfsdir" || panic
            tar xf "$tmpdir/$tar" || panic "Failed extracting source"
        )

    print "Preparing rootfs enviroment"
        cp -r "$repodir"        "$rootfsdir/var/db/kiss/live"
        install -D "$filesdir/issue"        -t "$rootfsdir/root/.cache"
        install -D "$hooksdir/kiss/hooks"   -t "$rootfsdir/root/.cache"
        install -D "$filesdir/kiss-live.sh" -t "$rootfsdir/etc/profile.d"

        git clone "$url/repo"      "$rootfsdir/var/db/kiss/repo"

    print "Updating system"
        chroot_exec "kiss u" || panic "Failed updating system"

        # shellcheck disable=2039
        [ "$packages" ] && base_pkgs="$base_pkgs ${packages//,/ }"

    print "Build base packages"
        for pkg in $base_pkgs tinyramfs; do
            chroot_exec "kiss b $pkg && kiss i $pkg" || panic "Failed to build $pkg"
        done
}

prepare_kde()
{
    print "Preparing kde enviroment"
        cp "$filesdir/x"           "$rootfsdir/root/.cache/x"
        cp "$filesdir/profile"     "$rootfsdir/root/.cache/profile"

        git clone "$url/community" "$rootfsdir/var/db/kiss/community"
        git clone "$kde_url"       "$rootfsdir/var/db/kiss/kde"

        # false positive
        # shellcheck disable=2016
        {
            echo 'KISS_PATH=$KISS_PATH:/var/db/kiss/repo/xorg'
            echo 'KISS_PATH=$KISS_PATH:/var/db/kiss/community/community'
            echo 'KISS_PATH=/var/db/kiss/kde/kde:$KISS_PATH'
            echo 'KISS_PATH=/var/db/kiss/kde/extra:$KISS_PATH'
            echo 'KISS_PATH=/var/db/kiss/kde/plasma:$KISS_PATH'
            echo 'KISS_PATH=/var/db/kiss/kde/frameworks:$KISS_PATH'
        } >> "$rootfsdir/etc/profile.d/kiss-live.sh"

    print "Build kde packages"
        chroot_exec "kiss b dbus libudev-zero" || panic "Failed to build kde"
        chroot_exec "kiss b libinput xf86-input-libinput xorg-server" || panic "Failed to build kde"

        for pkg in $kde_pkgs; do
            chroot_exec "kiss i $pkg || kiss b $pkg && kiss i $pkg" || panic "Failed to build $pkg"
        done

        base_pkgs="$base_pkgs $kde_pkgs"
}

make_iso()
{
    print "Preparing syslinux files"
        install -D "$filesdir/syslinux.cfg" -t "$isodir/boot/syslinux"
        for file in $syslinux_files; do
            install -D "/usr/lib/syslinux/$file" -t "$isodir/boot/syslinux"
        done

    print "Exporting pkgs"
        for pkg in $base_pkgs; do
            read -r ver rel < "$rootfsdir/var/db/kiss/installed/$pkg/version"
            install -D "$rootfsdir/root/.cache/kiss/bin/$pkg@$ver-$rel.tar.xz" -t "$isodir/pkgs"
        done

        install -D "$rootfsdir/boot/vmlinuz" -t "$isodir/boot" \
            || panic "Failed copying kernel"

    print "Creating initrd"
        read -r kver _ < "$rootfsdir/var/db/kiss/installed/linux/version"

        mkdir -p "$rootfsdir/usr/share/tinyramfs/hooks"
        cp -r "$hooksdir/tinyramfs" "$rootfsdir/usr/share/tinyramfs/hooks/diskless"
        install -D "$filesdir/config" -t "$rootfsdir/etc/tinyramfs"

        sed -i "s/@ISOLABEL@/$isolabel/g" "$rootfsdir/etc/tinyramfs/config" \
            || panic "Failed preparing tinyramfs"

        chroot_exec "debug=$debug tinyramfs -k $kver -o /boot/initrd" \
            || panic "Failed create initramfs"
        
        install -D "$rootfsdir/boot/initrd" -t "$isodir/boot" \
            || panic "Failed copying initrd"
    
    print "Setup grub efi"
        echo "search --no-floppy --set=root --label $isolabel" >  "$tmpdir/grub-early.cfg"
        echo "set prefix=(\$root)/boot/grub"                   >> "$tmpdir/grub-early.cfg"
        install -D "$filesdir/grub.cfg" -t "$isodir/boot/grub"

        # false positive
        # shellcheck disable=2086
        grub-mkimage \
            --config="$tmpdir/grub-early.cfg" \
            --prefix="/boot/grub" \
            --output="$tmpdir/bootx64.efi" \
            --format="x86_64-efi" \
            --compression="xz" \
            ${grub_mod}

        dd if=/dev/zero of="$isodir/boot/grub/efi.img" count=4096
        mkdosfs -n KISS-UEFI "$isodir/boot/grub/efi.img" \
            || panic "Failed create mkdosfs image"

        mkdir -p "$isodir/boot/grub/efiboot"
        mount -o loop "$isodir/boot/grub/efi.img" "$isodir/boot/grub/efiboot" \
            || panic "Failed mount efi.img"

        install -D "$tmpdir/bootx64.efi" -t "$isodir/boot/grub/efiboot/EFI/BOOT"
        umount "$isodir/boot/grub/efiboot"
        rm -rf "$isodir/boot/grub/efiboot" "$tmpdir/bootx64.efi" "$tmpdir/grub-early.cfg"

    print "Creating iso"
        rm -f "$isolabel.iso" "$isolabel.iso.md5" "$isolabel.iso.sha1"
        xorriso \
            -as mkisofs \
            -isohybrid-mbr "$isodir/boot/syslinux/isohdpfx.bin" \
            -eltorito-boot boot/syslinux/isolinux.bin \
            -eltorito-catalog boot/syslinux/boot.cat \
            -no-emul-boot \
            -boot-load-size 4 \
            -boot-info-table \
            -eltorito-alt-boot \
            -e boot/grub/efi.img \
            -no-emul-boot \
            -isohybrid-gpt-basdat \
            -volid "$isolabel" \
            -output "$here/$isolabel.iso" \
            "$isodir" \
            || panic "Failed creating iso"

    print "Generate checksums"
        md5sum  "$isolabel.iso" > "$here/$isolabel.iso.md5"
        sha1sum "$isolabel.iso" > "$here/$isolabel.iso.sha1"
}

# int main()
{
    [ "$(id -u)" = 0 ] || panic "must be run as root"

    # enable exit on error and disable globbing
    set -ef

    check_depends
    prepare_environment "$@"
    prepare_rootfs
    [ "$kde" = 1 ] && prepare_kde
    make_iso
}
